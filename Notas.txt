Configuraciones basicas:

* git config ---global user.mail mimail@gmail.com
* git config ---global user.name miusuario
* git config ---global color.ui true
* git config ---global core.editor {nombre del editor}: vim "atom --wait"
______________________________________________________

* git init (crear un repositorio dentro de la carpera en la que estoy ubicado. Cuando lo crea correctamente aparece como git:(master)) 
* Borar repositorios: cuando creas un repositorio, se crea una carpeta .git de forma oculta dentro de la carpeta donde se creó el repositorio
* working directory: Cada que crees un archivo dentro del repositorio, queda en el "working directory"
* Git status: Nos muestra el estado de los archivos que estan dentro del repositorio
* Git add nombre_archivo.extencion (pasa un archivo a stage)
* Git add -A (sube todos los archivos que esten en working directory a stage)
* Git rm --cached nombre_archivo.extencion(quita el archivo del stage y lo deja en el working directory, ojo no borra del archivo del repositorio)
* Git rm -f nombre_archivo.extencion borra forzosamente el archivo, tanto del stage, como del working directory
* Git commit -m "mensaje" (Es bueno ser descriptivos con el mensaje para saber lo que se hizo en ese commit y para informar al resto de personas.)
* Git commit -m "mensaje" --ammend (nos ayuda a realizar un cambio, a concatener algo que nos faltò en la ultima subida)
* Git log (nos muestra la historia de todos los commits que hemos realizados.)
* Git log --oneline (Nos muestra lo commits en una sola linea, un resumen)
* Git log --oneline --graph ()
* Git tag -a "versión" -m 'descripciòn'(etiqeutar la version de los proyectos)
- Git tag -a 0.5 -m 'versión estable del proyecto' 
* Git tag -l (muestra una lista de las versiones creadas)
* Git tag -f (renombrar)
* Git tag -d (borrar)
* Git diff {commid 1} {commid 2} (nos muestra los cambios que hubieron entre los commids)
* Git reset  --soft {commid del cual queremos quitar los cambios} (esto quita el commid o los commid posteriores y los deja en stage)
* Git reset  --mixed {commid del cual queremos quitar los cambios} (esto quita el commid o los commid posteriores y los deja en working directory)
* Git reset  --hard {commid hasta el cual queremos quita los cambios} (esto quita todos los commid antes de ese, los elimina totalmente, si no tiene anotados los SHA1 del commid posteriores los perderas totalmente)
* Git reset  --hard (Sin añadir SHA1 nos elimina lo que este en stage y los elimina totalmente, los archivos ni siquiera quedan en working directory. Pero si estan en working directory, no los afecta)

* Git branch {nombre} (Crear una rama)
* Git branch -l (lista las ramas creadas)
* Git branch -d {nombre de rama} (borrar una rama)
* Git branch -D {Borrado forzoso de rama}	
* Git branch -m {nombre de rama que queremos cambiar} {nuevo nombre de rama} (para cambiar el nombre de la rama)
* Git checkout {nombre de rama o SHA1} (moverse entre ramas o SHA1)
* Git checkout -b nombre (crea una rama y de una vez te mueves en ella)
* Git merge nombre_de_rama_a_mezclar (mezclar ramas. Ojo, debes ubicarte en la rama que quieres que queden los cambios)
* Git rebase (hace prácticamente lo mismo que merge, cambiamos la historia de nuestro proyecto sin crear bifurcaciones del proyecto. Es mejor usar merge. Usar solo git rebase de manera local.)
* Git stash (guarda los cambios hechos en un limbo, guarda cambios como un commit)
* Git stash list (muestra la lista de los stash creados)
* Git stash drop {stash} (borra un stash guardado)
* Git stash apply (aplica cambios)
* Git cherry-pick {SHA1 del commit que se debe pasar} (esto comando nos mueve un commit que se haya creado en una rama donde no debìa ir. Nos ubicamos en la rama correcta y aplicamos el comando)

GITHUB

* Git clone {url} (clona un repositorio)
* ssh-keygen -t rsa -b 4096 -C "jdavid.rodriguez.e@gmail.com" (crea una llave SSH)
* clip < ~/.ssh/id_rsa.pub (copea la llave SSH en GITHUB)
* Posterior debes ir a GITHUB  crear una nueva llave y pegar la llave que creaste anteriormente

PARA LLEVAR DE GITHUB A TU REPOSITORIO LOCAL:

1. Entras a tu repositorio local
2. Git remote add {nombre del repositorio remoto} {direccion url de GITHUB, clone whit SSH} (crea un repositorio remoto)
	* Git remote -v (nos muestra que el repositorio remoto esta correctamente enlazado)
	* Git remote remove {nombre del repositorio remoto} (Para elimminar un repositorio remoto, en caso de que haya quedado mal generado)
3. Git fetch {nombre del repositorio remoto} {nombre de rama} (esto nnos trae los archivos que esten en GITHUB a nuestro repositorio local, pero no lo mezcla aùn)
4. Git merge {nombre del repositorio remoto}/{nombre de rama} (esto nos mezcla los archivos traidos con los del repositorio local, en caso de mostrar un error añadir:
	Git merge {nombre del repositorio remoto}/{nombre de rama} --allow-unrelated-historie
	Git pull {nombre del repositorio remoto} {nombre de rama} (esto realiza el mismo procedimiento de traer los archivos de GITHUB al repositorio local y los conbina de una vez.)
	Posterior a esto nos lleva al editor de texto para terminar de guardar cambios

PARA LLEVAR DE TU REPOSITORIO LOCAL A GITHUB:

1. Git push {nombre del repositorio remoto} {nombre de rama} (nos lleva todo lo que tengamos en el repositorio local a GITHUB, pero solo la rama indicada)
	Git push {nombre del repositorio remoto} {nombre de rama} --tags (llega los tags a GITHUB)
	

EN GITHUB
	
* Unwatch (Nos permite que nos lleguen notificaciones si hay cambios en el repositorio)
* Not watching (Se te notifica cuando participas o mencionas)
* Ignoring (Nunca ser notificado)

* Star (Asi como en facebook se vive a base de likes, aqui se vive a base de estrellas, cuanto mas estrellas mas valorado es ese proyecto, y a su misma vez tiene muchos forks)
* Fork (Indica la cantidad de gente que hizo copia de su repositorio para poderles enviar cambios)

Podemos ver las estadísticas de nuestro proyecto en Insights

* contributors (Nos permite ver el avance de nuestro proyecto)
* traffic (Nos muestra el trafico de nuestro proyecto)
* punch card (Muestra los dias que a estado trabajando)
* network (Vemos el flujo de ramas)
* members (Nos muestra la gente que le a hecho fork a nuestro repositorio)
* dependents (Nos muestra si nuestro repositorio depende de otro, es decir de un super repositorio)

Settings:

* collaborators (Aqui se añade a mas gente para que colabore en este proyecto)
* branches (Podemos cambiar la rama principal, y proteger ramas)
CONSEJO: Protege siempre la rama master (Una vez protegida ningun cambio va a ir directamente a master tenemos que pasar por cierto proceso para que un codigo vaya a master) (Este proceso lo vemos dentro del curso)
* pull request (Es una forma de tomar una rama alterna por ejemplo la rama RD y no mezclarla directamente con master. Si no enviar una solicitud de mezcla desde la rama RD a la master, asi alguien mas puede ver esa solicitud, algun colaborador, etc…Y se haga un code review)
* Webhooks (Es la forma de poderle agregar git code a otros servicios para que hagan un auto deploy)
* Integrations & servicies (Incluir otros servicios como amazon, y que pueden hacer uso de nuestro repositorio)
* Deploy keys (Son las llaves publicas ssh de tu servidor para poder hacer git pull desde el servidor, y tener tu código en producción.)
* Pull requests (Vemos una lista de pull requests)
* Issues (Son la forma en que manejamos nuestros problemas, bugs en github. Por ejemplo: hay un bug, este no va a ser reportado si no que lo que vamos a hacer es crear un issue comentando donde hay un problema, se hace de esta manera, ocurre en tal sistema operativo, etc…)

PROJECS

Opciones:

* create a new project (administras tu proyecto como tipo de tareas)
	name and description
	
	+ Add column 
	-TODO (cosas por hacer)
	-WIP (working progress, en que estamos trabajando)
	-Bugs (cosas que hay que arreglar de forma inmediata)
	-Waiting for review (esperando aprobaciòn de alguien mas)
	-Done (hecho)

* Template para issues:

Te ubicas en <> Code, luego clic en "	create new file":

En name your file, digitas: "issue_template.md" (siempre se debe llamar así)
En la descripción realizas preguntas a la plantilla, por ejemplo:

## ¿Como puedo arreglar el problema?
Por favor explicarnos como replicar el problema paso a paso y en sistema operativo
## ¿En que versión de invie?
Si este problema ocurre en todas las versiones o por favor mencionarla

Nota: ## (para poner en modo titulo)


* Template Pull request:

Te ubicas en <> Code, luego clic en "	create new file":

En name your file, digitas: "pull_request_template.md" (siempre se debe llamar así)
En la descripción realizas preguntas a la plantilla, por ejemplo:
# Descrición 
¿Que ha cambiado?

- [ ] Frontend
- [ ] Backend
- [ ] Configuración del server

nota: - [ ] (esto crea un checked)


IGNORAR ARCHIVOS NO DESEADOS 

Para evitar subir o hacer commit a un archivo, para esto:
1. Se genera archivo .gitignore
2. Luego modificarlo y dentro de este archivo ingresar el nombre del archivo que deseo ignorar con la extencion


Issues: Sirve para reportar un problema o sugerir algún cambio que para el repositorio.
Milestones: Forma para agrupar Issues o Pull Request.




La ip de GitHub es 192.168.252.153 - 192.168.252.154











